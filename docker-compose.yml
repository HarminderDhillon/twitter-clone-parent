services:
  postgres:
    image: postgres:14
    container_name: twitter-clone-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: twitterclone
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: twitter-clone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: twitter-clone-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: twitter-clone-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: twitter-clone-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/twitterclone
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_REDIS_HOST=redis
      - SPRING_DATA_ELASTICSEARCH_CLUSTER-NODES=elasticsearch:9200
      - SPRING_RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=changeThisToASecureKeyInProduction
      - SPRING_LIQUIBASE_ENABLED=true
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_GENERATE_DDL=true
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_DHILLON_TWITTERCLONE=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG
    ports:
      - "8082:8081"
    volumes:
      - backend-uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:8081/api/ || exit 0"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: twitter-clone-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000-3010:3000"
    environment:
      - NEXT_PUBLIC_API_URL=/api
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000 || exit 0"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Replaces functionality from show-ports.sh and app-info service
  status:
    image: alpine:latest
    container_name: twitter-clone-status
    depends_on:
      - frontend
      - backend
      - nginx
    command: >
      sh -c "
        apk add --no-cache curl &&
        sleep 5 &&
        
        echo '===== Twitter Clone Application Status =====' &&
        
        # Try to find the frontend port (direct approach)
        FRONTEND_PORT='' &&
        FRONTEND_STATUS='not running' &&
        for port in $(seq 3000 3010); do
          if curl -s -o /dev/null -m 1 -w '' http://localhost:$port 2>/dev/null; then
            FRONTEND_PORT=$port
            FRONTEND_STATUS=\"http://localhost:$port\"
            break
          fi
        done &&
        
        # Backend is mapped to port 8082
        if curl -s -o /dev/null -m 1 -w '' http://localhost:8082/api 2>/dev/null; then
          BACKEND_STATUS='http://localhost:8082/api'
          API_DOCS_STATUS='http://localhost:8082/api/swagger-ui.html'
        else
          BACKEND_STATUS='not running'
          API_DOCS_STATUS='not running'
        fi &&
        
        # Check Nginx proxy (primary access point)
        if curl -s -o /dev/null -m 1 -w '' http://localhost:80 2>/dev/null; then
          NGINX_STATUS='http://localhost:80 (Main access point)'
        else
          NGINX_STATUS='not running'
        fi &&
        
        echo 'Nginx Proxy:     '$NGINX_STATUS &&
        echo 'Frontend:         '$FRONTEND_STATUS &&
        echo 'Backend API:      '$BACKEND_STATUS &&
        echo 'API Documentation: '$API_DOCS_STATUS &&
        echo '=============================================' &&
        echo 'Note: For exact port mappings, run: docker-compose ps'
      "
    network_mode: "host"
    profiles:
      - status

  # Service for one-time display of application information after startup
  app-info:
    image: alpine:latest
    container_name: twitter-clone-info
    depends_on:
      - frontend
      - backend
      - nginx
    command: >
      sh -c "
        apk add --no-cache curl &&
        sleep 10 &&
        
        echo '===== Twitter Clone Application Running =====' &&
        
        # Try to find the frontend port (direct approach)
        FRONTEND_PORT='' &&
        for port in $(seq 3000 3010); do
          if curl -s -o /dev/null -m 1 -w '' http://localhost:$port 2>/dev/null; then
            FRONTEND_PORT=$port
            break
          fi
        done &&
        
        # If we couldn't find the port, use a default message
        if [ -z \"$FRONTEND_PORT\" ]; then
          echo 'Frontend:         http://localhost:3000-3010 (check docker ps for exact port)' 
        else
          echo 'Frontend:         http://localhost:'$FRONTEND_PORT
        fi &&
        
        echo 'Main Application: http://localhost:80 (Nginx proxy)' &&
        echo 'Backend API:      http://localhost:8082/api' &&
        echo 'API Documentation: http://localhost:8082/api/swagger-ui.html' &&
        echo '=============================================' &&
        echo 'To check services again, run: docker-compose run --rm status' &&
        echo 'For exact port mappings, run: docker-compose ps'
      "
    network_mode: "host"

  # Service to fix Next.js if needed (replacing fix-nextjs.sh)
  fix-nextjs:
    image: node:18-alpine
    container_name: twitter-clone-fix-nextjs
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: >
      sh -c "
        echo 'Fixing Next.js installation...' &&
        rm -rf node_modules &&
        rm -rf .next &&
        rm -f package-lock.json &&
        echo 'Updating Next.js to a stable version...' &&
        sed -i 's/\"next\": \"14.2.0\"/\"next\": \"14.1.0\"/g' package.json &&
        sed -i 's/\"eslint-config-next\": \"14.2.0\"/\"eslint-config-next\": \"14.1.0\"/g' package.json &&
        echo 'Reinstalling dependencies...' &&
        npm install &&
        echo 'Next.js installation fixed. Please restart the application.'
      "
    profiles:
      - tools

  # Add a new Nginx reverse proxy service to handle API requests
  nginx:
    image: nginx:alpine
    container_name: twitter-clone-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  elastic-data:
  rabbitmq-data:
  backend-uploads: 