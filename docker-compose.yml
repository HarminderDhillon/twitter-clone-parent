services:
  postgres:
    image: postgres:14
    container_name: twitter-clone-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: twitterclone
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: twitter-clone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: twitter-clone-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: twitter-clone-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: twitter-clone-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/twitterclone
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_REDIS_HOST=redis
      - SPRING_DATA_ELASTICSEARCH_CLUSTER-NODES=elasticsearch:9200
      - SPRING_RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=changeThisToASecureKeyInProduction
      - SPRING_LIQUIBASE_ENABLED=false
    ports:
      - "8082:8081"
    volumes:
      - backend-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: twitter-clone-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000-3010:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8081/api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  app-info:
    image: alpine:latest
    container_name: twitter-clone-info
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: |
      sh -c "
        echo '\033[0;34m===== Twitter Clone Application Running =====\033[0m';
        echo '\033[0;32mFrontend:\033[0m http://$$(getent hosts host.docker.internal | awk '{ print $$1 }'):$$(docker port twitter-clone-frontend 3000 | cut -d: -f2)';
        echo '\033[0;32mBackend API:\033[0m http://$$(getent hosts host.docker.internal | awk '{ print $$1 }'):8082/api';
        echo '\033[0;32mAPI Documentation:\033[0m http://$$(getent hosts host.docker.internal | awk '{ print $$1 }'):8082/api/swagger-ui.html';
        echo '\033[0;34m=============================================\033[0m';
        echo 'To check services again, run: docker-compose up app-info';
      "
    network_mode: "host"

volumes:
  postgres-data:
  redis-data:
  elastic-data:
  rabbitmq-data:
  backend-uploads: 